{
	"info": {
		"_postman_id": "d4460bf3-76ae-4a12-ae91-b3260908471b",
		"name": "Github examples",
		"description": "# How to use\n\n1. Make an API User in Momentus Enterprise (Main Menu->API User-> Add)\n2. Modify this Postman collection variables with your new Momentus API User information\n3. Modify the endpoint URL to reflect an entry in your system. Example: for GET Account, swap out 10 and ACCTCODE for an actual account code in your Momentus\n4. Hit send to try out one of the endpoints! The pre-request script tab for the collection contains example code that generates the JWT for the calls.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1044315"
	},
	"item": [
		{
			"name": "GET Account",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{domain}}/api/v1/Accounts/10/ACCTCODE",
					"protocol": "https",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"v1",
						"Accounts",
						"10",
						"ACCTCODE"
					]
				},
				"description": "This request creates a signed JWT using the collection variables and encodes the JWT data as base64. It then sets the signed and encoded JWT as `Bearer` token in the `Authorization` header."
			},
			"response": []
		},
		{
			"name": "Add Account",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"Organization\": \"10\", \"AccountCode\": \"*AUTO\", \"Name\": \"My New Company\", \"Class\": \"O\" }"
				},
				"url": {
					"raw": "https://{{domain}}/api/v1/Accounts",
					"protocol": "https",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"v1",
						"Accounts"
					]
				},
				"description": "This request creates a signed JWT using the collection variables and encodes the JWT data as base64. It then sets the signed and encoded JWT as `Bearer` token in the `Authorization` header."
			},
			"response": []
		},
		{
			"name": "Edit Event",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"EventID\": 28639, \"Organization\": \"10\", \"Status\": \"22\" }"
				},
				"url": {
					"raw": "https://{{domain}}/api/v1/Events/10/28639",
					"protocol": "https",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"v1",
						"Events",
						"10",
						"28639"
					]
				},
				"description": "This request creates a signed JWT using the collection variables and encodes the JWT data as base64. It then sets the signed and encoded JWT as `Bearer` token in the `Authorization` header."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// JWT generation script adapted from",
					"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
					"",
					"var jwtSecret = pm.environment.get('secret');",
					"var apiUserId = pm.environment.get('ApiUserId');",
					"var apiUserKey = pm.environment.get('ApiUserKey');",
					"var proxiedUser = pm.environment.get('ProxiedUser') || ''; //Optional user id of the user the API User is proxying as",
					"",
					"console.log('Check value: ', apiUserId);",
					"",
					"",
					"if( !jwtSecret) {",
					"    throw new Error(\"'secret' variable not defined\");",
					"} ",
					"",
					"if( !apiUserId) {",
					"    throw new Error(\"'ApiUserId' variable not defined\");",
					"}",
					"",
					"if( !apiUserKey) {",
					"    throw new Error(\"'ApiUserKey' variable not defined\");",
					"}",
					"",
					"// Set headers for JWT",
					"var header = {",
					"\t'typ': 'JWT',",
					"\t'alg': 'HS256'",
					"};",
					"",
					"// Prepare timestamp in seconds",
					"var currentTimestamp = Math.floor(Date.now() / 1000)",
					"",
					"var data = {",
					"\t'iss': apiUserId,",
					"\t'key': apiUserKey,",
					"    'sub': proxiedUser,",
					"\t'iat': currentTimestamp,",
					"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
					"}",
					"",
					"",
					"function base64url(source) {",
					"    // Encode in classical base64",
					"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
					"    ",
					"    // Remove padding equal characters",
					"    encodedSource = encodedSource.replace(/=+$/, '')",
					"    ",
					"    // Replace characters according to base64url specifications",
					"    encodedSource = encodedSource.replace(/\\+/g, '-')",
					"    encodedSource = encodedSource.replace(/\\//g, '_')",
					"    ",
					"    return encodedSource",
					"}",
					"",
					"// encode header",
					"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
					"var encodedHeader = base64url(stringifiedHeader)",
					"",
					"// encode data",
					"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
					"var encodedData = base64url(stringifiedData)",
					"",
					"// build token",
					"var token = `${encodedHeader}.${encodedData}`",
					"",
					"// sign token",
					"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
					"signature = base64url(signature)",
					"var signedToken = `${token}.${signature}`",
					"",
					"pm.environment.set('jwt_signed', signedToken)",
					"console.log('Signed with', jwtSecret)",
					"console.log('Signed and encoded JWT', signedToken)"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}