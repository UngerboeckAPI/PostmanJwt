{
	"info": {
		"_postman_id": "6cddc49b-27f9-4b72-a95f-626d1b8a8b7f",
		"name": "Generate JWT",
		"description": "This collection shows how [pre-request scripts][pre-req] in Postman can be used to generate [JSON Web Tokens][jwt] (JWT). This is useful for APIs that need their clients to create JWTs and send them as part of requests.\n\n[pre-req]: https://www.getpostman.com/docs/v6/postman/scripts/pre_request_scripts\n[jwt]: https://en.wikipedia.org/wiki/JSON_Web_Token",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "JWT signed with base64 encoding",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1bbad800-0f35-4ab3-a5fb-de3bf73109a1",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get('jwt_secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get('jwt_iss') || '',",
							"\t'key': pm.environment.get('jwt_key') || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed with', jwtSecret)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{domain}}/api/v1/Accounts/10/ACCTCODE",
					"protocol": "https",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"v1",
						"Accounts",
						"10",
						"ACCTCODE"
					]
				},
				"description": "This request creates a signed JWT using the `jwt_secret` variable and encodes the JWT data as base64. It then sets the signed and encoded JWT as `Bearer` token in the `Authorization` header."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "6d6a0a97-a696-4588-b420-d2c153dd6b8b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "952ed680-f2bd-4661-8606-8129713ab24e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}